// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package block_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockGrpcServiceClient is the client API for BlockGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockGrpcServiceClient interface {
	// wallet rpc
	WalletTokenPrice(ctx context.Context, in *WalletTokenPriceRequest, opts ...grpc.CallOption) (*WalletTokenPriceResponse, error)
	WalletTxDetails(ctx context.Context, in *WalletTxDetailsRequest, opts ...grpc.CallOption) (*WalletTxListResponse, error)
	WalletTokenUpdated(ctx context.Context, in *WalletTokenUpdatedRequest, opts ...grpc.CallOption) (*WalletTokenListAndVersionResponse, error)
	WalletTokenSearch(ctx context.Context, in *WalletTokenSearchRequest, opts ...grpc.CallOption) (*WalletTokenListResponse, error)
	WalletGetTokenListByType(ctx context.Context, in *WalletGetTokenListByTypeRequest, opts ...grpc.CallOption) (*WalletTokenListAndVersionResponse, error)
	WalletGetTransactionList(ctx context.Context, in *WalletTxListRequest, opts ...grpc.CallOption) (*WalletTxListResponse, error)
	// block explorer
	CountTransactionByTimeRange(ctx context.Context, in *CountByTimeRangeRequest, opts ...grpc.CallOption) (*CountByTimeRangeResponse, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	CountTransactionByBlockNumber(ctx context.Context, in *CountTransactionByBlockNumberRequest, opts ...grpc.CallOption) (*CountTransactionByBlockNumberResponse, error)
	CountAccountByTimeRange(ctx context.Context, in *CountByTimeRangeRequest, opts ...grpc.CallOption) (*CountByTimeRangeResponse, error)
	CountContractByTimeRange(ctx context.Context, in *CountByTimeRangeRequest, opts ...grpc.CallOption) (*CountByTimeRangeResponse, error)
	ApiVerifyTokenSymbol(ctx context.Context, in *ApiVerifyTokenContractRequest, opts ...grpc.CallOption) (*ApiVerifyTokenContractResponse, error)
	ApiBlockOverview(ctx context.Context, in *ApiBlockOverviewRequest, opts ...grpc.CallOption) (*ApiBlockOverviewResponse, error)
	ApiTxOverview(ctx context.Context, in *ApiTxOverviewRequest, opts ...grpc.CallOption) (*ApiTxOverviewResponse, error)
	ApiCountAddress(ctx context.Context, in *ApiCountAddressRequest, opts ...grpc.CallOption) (*ApiCountAddressResponse, error)
	ApiTxExists(ctx context.Context, in *ApiTxOverviewRequest, opts ...grpc.CallOption) (*ApiTxExistsResponse, error)
	ApiBlockExists(ctx context.Context, in *ApiBlockOverviewRequest, opts ...grpc.CallOption) (*ApiBlockExistsResponse, error)
	ApiTxListByContract(ctx context.Context, in *ApiTxListByContractRequest, opts ...grpc.CallOption) (*ApiTxListByContractResponse, error)
	ApiContractOverview(ctx context.Context, in *ApiContractOverviewRequest, opts ...grpc.CallOption) (*ApiContractOverviewResponse, error)
	ApiAddressOverview(ctx context.Context, in *ApiAddressOverviewRequest, opts ...grpc.CallOption) (*ApiAddressOverviewResponse, error)
	ApiTxListByAccount(ctx context.Context, in *ApiTxListByAccountRequest, opts ...grpc.CallOption) (*ApiTxListByAccountResponse, error)
	ApiGetLatestTxList(ctx context.Context, in *ApiGetLatestTxListRequest, opts ...grpc.CallOption) (*ApiGetLatestTxListResponse, error)
	ApiBlockchainBlockList(ctx context.Context, in *ApiBlockchainBlockListRequest, opts ...grpc.CallOption) (*ApiBlockchainBlockListResponse, error)
	ApiBlockchainAccountList(ctx context.Context, in *ApiBlockchainAccountListRequest, opts ...grpc.CallOption) (*ApiBlockchainAccountListResponse, error)
	ApiBlockchainTxList(ctx context.Context, in *ApiBlockchainTxListRequest, opts ...grpc.CallOption) (*ApiBlockchainTxListResponse, error)
	ApiSmartContractList(ctx context.Context, in *ApiSmartContractListRequest, opts ...grpc.CallOption) (*ApiSmartContractListResponse, error)
	ApiGetBlockNumberByBlockHash(ctx context.Context, in *ApiGetBlockNumberByBlockHashRequest, opts ...grpc.CallOption) (*ApiGetBlockNumberByBlockHashResponse, error)
}

type blockGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockGrpcServiceClient(cc grpc.ClientConnInterface) BlockGrpcServiceClient {
	return &blockGrpcServiceClient{cc}
}

func (c *blockGrpcServiceClient) WalletTokenPrice(ctx context.Context, in *WalletTokenPriceRequest, opts ...grpc.CallOption) (*WalletTokenPriceResponse, error) {
	out := new(WalletTokenPriceResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/WalletTokenPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) WalletTxDetails(ctx context.Context, in *WalletTxDetailsRequest, opts ...grpc.CallOption) (*WalletTxListResponse, error) {
	out := new(WalletTxListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/WalletTxDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) WalletTokenUpdated(ctx context.Context, in *WalletTokenUpdatedRequest, opts ...grpc.CallOption) (*WalletTokenListAndVersionResponse, error) {
	out := new(WalletTokenListAndVersionResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/WalletTokenUpdated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) WalletTokenSearch(ctx context.Context, in *WalletTokenSearchRequest, opts ...grpc.CallOption) (*WalletTokenListResponse, error) {
	out := new(WalletTokenListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/WalletTokenSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) WalletGetTokenListByType(ctx context.Context, in *WalletGetTokenListByTypeRequest, opts ...grpc.CallOption) (*WalletTokenListAndVersionResponse, error) {
	out := new(WalletTokenListAndVersionResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/WalletGetTokenListByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) WalletGetTransactionList(ctx context.Context, in *WalletTxListRequest, opts ...grpc.CallOption) (*WalletTxListResponse, error) {
	out := new(WalletTxListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/WalletGetTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) CountTransactionByTimeRange(ctx context.Context, in *CountByTimeRangeRequest, opts ...grpc.CallOption) (*CountByTimeRangeResponse, error) {
	out := new(CountByTimeRangeResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/CountTransactionByTimeRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) CountTransactionByBlockNumber(ctx context.Context, in *CountTransactionByBlockNumberRequest, opts ...grpc.CallOption) (*CountTransactionByBlockNumberResponse, error) {
	out := new(CountTransactionByBlockNumberResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/CountTransactionByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) CountAccountByTimeRange(ctx context.Context, in *CountByTimeRangeRequest, opts ...grpc.CallOption) (*CountByTimeRangeResponse, error) {
	out := new(CountByTimeRangeResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/CountAccountByTimeRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) CountContractByTimeRange(ctx context.Context, in *CountByTimeRangeRequest, opts ...grpc.CallOption) (*CountByTimeRangeResponse, error) {
	out := new(CountByTimeRangeResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/CountContractByTimeRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiVerifyTokenSymbol(ctx context.Context, in *ApiVerifyTokenContractRequest, opts ...grpc.CallOption) (*ApiVerifyTokenContractResponse, error) {
	out := new(ApiVerifyTokenContractResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiVerifyTokenSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiBlockOverview(ctx context.Context, in *ApiBlockOverviewRequest, opts ...grpc.CallOption) (*ApiBlockOverviewResponse, error) {
	out := new(ApiBlockOverviewResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiBlockOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiTxOverview(ctx context.Context, in *ApiTxOverviewRequest, opts ...grpc.CallOption) (*ApiTxOverviewResponse, error) {
	out := new(ApiTxOverviewResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiTxOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiCountAddress(ctx context.Context, in *ApiCountAddressRequest, opts ...grpc.CallOption) (*ApiCountAddressResponse, error) {
	out := new(ApiCountAddressResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiCountAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiTxExists(ctx context.Context, in *ApiTxOverviewRequest, opts ...grpc.CallOption) (*ApiTxExistsResponse, error) {
	out := new(ApiTxExistsResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiTxExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiBlockExists(ctx context.Context, in *ApiBlockOverviewRequest, opts ...grpc.CallOption) (*ApiBlockExistsResponse, error) {
	out := new(ApiBlockExistsResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiBlockExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiTxListByContract(ctx context.Context, in *ApiTxListByContractRequest, opts ...grpc.CallOption) (*ApiTxListByContractResponse, error) {
	out := new(ApiTxListByContractResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiTxListByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiContractOverview(ctx context.Context, in *ApiContractOverviewRequest, opts ...grpc.CallOption) (*ApiContractOverviewResponse, error) {
	out := new(ApiContractOverviewResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiContractOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiAddressOverview(ctx context.Context, in *ApiAddressOverviewRequest, opts ...grpc.CallOption) (*ApiAddressOverviewResponse, error) {
	out := new(ApiAddressOverviewResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiAddressOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiTxListByAccount(ctx context.Context, in *ApiTxListByAccountRequest, opts ...grpc.CallOption) (*ApiTxListByAccountResponse, error) {
	out := new(ApiTxListByAccountResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiTxListByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiGetLatestTxList(ctx context.Context, in *ApiGetLatestTxListRequest, opts ...grpc.CallOption) (*ApiGetLatestTxListResponse, error) {
	out := new(ApiGetLatestTxListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiGetLatestTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiBlockchainBlockList(ctx context.Context, in *ApiBlockchainBlockListRequest, opts ...grpc.CallOption) (*ApiBlockchainBlockListResponse, error) {
	out := new(ApiBlockchainBlockListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiBlockchainBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiBlockchainAccountList(ctx context.Context, in *ApiBlockchainAccountListRequest, opts ...grpc.CallOption) (*ApiBlockchainAccountListResponse, error) {
	out := new(ApiBlockchainAccountListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiBlockchainAccountList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiBlockchainTxList(ctx context.Context, in *ApiBlockchainTxListRequest, opts ...grpc.CallOption) (*ApiBlockchainTxListResponse, error) {
	out := new(ApiBlockchainTxListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiBlockchainTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiSmartContractList(ctx context.Context, in *ApiSmartContractListRequest, opts ...grpc.CallOption) (*ApiSmartContractListResponse, error) {
	out := new(ApiSmartContractListResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiSmartContractList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockGrpcServiceClient) ApiGetBlockNumberByBlockHash(ctx context.Context, in *ApiGetBlockNumberByBlockHashRequest, opts ...grpc.CallOption) (*ApiGetBlockNumberByBlockHashResponse, error) {
	out := new(ApiGetBlockNumberByBlockHashResponse)
	err := c.cc.Invoke(ctx, "/block_proto.BlockGrpcService/ApiGetBlockNumberByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockGrpcServiceServer is the server API for BlockGrpcService service.
// All implementations must embed UnimplementedBlockGrpcServiceServer
// for forward compatibility
type BlockGrpcServiceServer interface {
	// wallet rpc
	WalletTokenPrice(context.Context, *WalletTokenPriceRequest) (*WalletTokenPriceResponse, error)
	WalletTxDetails(context.Context, *WalletTxDetailsRequest) (*WalletTxListResponse, error)
	WalletTokenUpdated(context.Context, *WalletTokenUpdatedRequest) (*WalletTokenListAndVersionResponse, error)
	WalletTokenSearch(context.Context, *WalletTokenSearchRequest) (*WalletTokenListResponse, error)
	WalletGetTokenListByType(context.Context, *WalletGetTokenListByTypeRequest) (*WalletTokenListAndVersionResponse, error)
	WalletGetTransactionList(context.Context, *WalletTxListRequest) (*WalletTxListResponse, error)
	// block explorer
	CountTransactionByTimeRange(context.Context, *CountByTimeRangeRequest) (*CountByTimeRangeResponse, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	CountTransactionByBlockNumber(context.Context, *CountTransactionByBlockNumberRequest) (*CountTransactionByBlockNumberResponse, error)
	CountAccountByTimeRange(context.Context, *CountByTimeRangeRequest) (*CountByTimeRangeResponse, error)
	CountContractByTimeRange(context.Context, *CountByTimeRangeRequest) (*CountByTimeRangeResponse, error)
	ApiVerifyTokenSymbol(context.Context, *ApiVerifyTokenContractRequest) (*ApiVerifyTokenContractResponse, error)
	ApiBlockOverview(context.Context, *ApiBlockOverviewRequest) (*ApiBlockOverviewResponse, error)
	ApiTxOverview(context.Context, *ApiTxOverviewRequest) (*ApiTxOverviewResponse, error)
	ApiCountAddress(context.Context, *ApiCountAddressRequest) (*ApiCountAddressResponse, error)
	ApiTxExists(context.Context, *ApiTxOverviewRequest) (*ApiTxExistsResponse, error)
	ApiBlockExists(context.Context, *ApiBlockOverviewRequest) (*ApiBlockExistsResponse, error)
	ApiTxListByContract(context.Context, *ApiTxListByContractRequest) (*ApiTxListByContractResponse, error)
	ApiContractOverview(context.Context, *ApiContractOverviewRequest) (*ApiContractOverviewResponse, error)
	ApiAddressOverview(context.Context, *ApiAddressOverviewRequest) (*ApiAddressOverviewResponse, error)
	ApiTxListByAccount(context.Context, *ApiTxListByAccountRequest) (*ApiTxListByAccountResponse, error)
	ApiGetLatestTxList(context.Context, *ApiGetLatestTxListRequest) (*ApiGetLatestTxListResponse, error)
	ApiBlockchainBlockList(context.Context, *ApiBlockchainBlockListRequest) (*ApiBlockchainBlockListResponse, error)
	ApiBlockchainAccountList(context.Context, *ApiBlockchainAccountListRequest) (*ApiBlockchainAccountListResponse, error)
	ApiBlockchainTxList(context.Context, *ApiBlockchainTxListRequest) (*ApiBlockchainTxListResponse, error)
	ApiSmartContractList(context.Context, *ApiSmartContractListRequest) (*ApiSmartContractListResponse, error)
	ApiGetBlockNumberByBlockHash(context.Context, *ApiGetBlockNumberByBlockHashRequest) (*ApiGetBlockNumberByBlockHashResponse, error)
	mustEmbedUnimplementedBlockGrpcServiceServer()
}

// UnimplementedBlockGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockGrpcServiceServer struct {
}

func (UnimplementedBlockGrpcServiceServer) WalletTokenPrice(context.Context, *WalletTokenPriceRequest) (*WalletTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTokenPrice not implemented")
}
func (UnimplementedBlockGrpcServiceServer) WalletTxDetails(context.Context, *WalletTxDetailsRequest) (*WalletTxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTxDetails not implemented")
}
func (UnimplementedBlockGrpcServiceServer) WalletTokenUpdated(context.Context, *WalletTokenUpdatedRequest) (*WalletTokenListAndVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTokenUpdated not implemented")
}
func (UnimplementedBlockGrpcServiceServer) WalletTokenSearch(context.Context, *WalletTokenSearchRequest) (*WalletTokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTokenSearch not implemented")
}
func (UnimplementedBlockGrpcServiceServer) WalletGetTokenListByType(context.Context, *WalletGetTokenListByTypeRequest) (*WalletTokenListAndVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletGetTokenListByType not implemented")
}
func (UnimplementedBlockGrpcServiceServer) WalletGetTransactionList(context.Context, *WalletTxListRequest) (*WalletTxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletGetTransactionList not implemented")
}
func (UnimplementedBlockGrpcServiceServer) CountTransactionByTimeRange(context.Context, *CountByTimeRangeRequest) (*CountByTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTransactionByTimeRange not implemented")
}
func (UnimplementedBlockGrpcServiceServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedBlockGrpcServiceServer) CountTransactionByBlockNumber(context.Context, *CountTransactionByBlockNumberRequest) (*CountTransactionByBlockNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTransactionByBlockNumber not implemented")
}
func (UnimplementedBlockGrpcServiceServer) CountAccountByTimeRange(context.Context, *CountByTimeRangeRequest) (*CountByTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAccountByTimeRange not implemented")
}
func (UnimplementedBlockGrpcServiceServer) CountContractByTimeRange(context.Context, *CountByTimeRangeRequest) (*CountByTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountContractByTimeRange not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiVerifyTokenSymbol(context.Context, *ApiVerifyTokenContractRequest) (*ApiVerifyTokenContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiVerifyTokenSymbol not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiBlockOverview(context.Context, *ApiBlockOverviewRequest) (*ApiBlockOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiBlockOverview not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiTxOverview(context.Context, *ApiTxOverviewRequest) (*ApiTxOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTxOverview not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiCountAddress(context.Context, *ApiCountAddressRequest) (*ApiCountAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiCountAddress not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiTxExists(context.Context, *ApiTxOverviewRequest) (*ApiTxExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTxExists not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiBlockExists(context.Context, *ApiBlockOverviewRequest) (*ApiBlockExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiBlockExists not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiTxListByContract(context.Context, *ApiTxListByContractRequest) (*ApiTxListByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTxListByContract not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiContractOverview(context.Context, *ApiContractOverviewRequest) (*ApiContractOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiContractOverview not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiAddressOverview(context.Context, *ApiAddressOverviewRequest) (*ApiAddressOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiAddressOverview not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiTxListByAccount(context.Context, *ApiTxListByAccountRequest) (*ApiTxListByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiTxListByAccount not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiGetLatestTxList(context.Context, *ApiGetLatestTxListRequest) (*ApiGetLatestTxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiGetLatestTxList not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiBlockchainBlockList(context.Context, *ApiBlockchainBlockListRequest) (*ApiBlockchainBlockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiBlockchainBlockList not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiBlockchainAccountList(context.Context, *ApiBlockchainAccountListRequest) (*ApiBlockchainAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiBlockchainAccountList not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiBlockchainTxList(context.Context, *ApiBlockchainTxListRequest) (*ApiBlockchainTxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiBlockchainTxList not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiSmartContractList(context.Context, *ApiSmartContractListRequest) (*ApiSmartContractListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiSmartContractList not implemented")
}
func (UnimplementedBlockGrpcServiceServer) ApiGetBlockNumberByBlockHash(context.Context, *ApiGetBlockNumberByBlockHashRequest) (*ApiGetBlockNumberByBlockHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiGetBlockNumberByBlockHash not implemented")
}
func (UnimplementedBlockGrpcServiceServer) mustEmbedUnimplementedBlockGrpcServiceServer() {}

// UnsafeBlockGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockGrpcServiceServer will
// result in compilation errors.
type UnsafeBlockGrpcServiceServer interface {
	mustEmbedUnimplementedBlockGrpcServiceServer()
}

func RegisterBlockGrpcServiceServer(s grpc.ServiceRegistrar, srv BlockGrpcServiceServer) {
	s.RegisterService(&BlockGrpcService_ServiceDesc, srv)
}

func _BlockGrpcService_WalletTokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).WalletTokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/WalletTokenPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).WalletTokenPrice(ctx, req.(*WalletTokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_WalletTxDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTxDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).WalletTxDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/WalletTxDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).WalletTxDetails(ctx, req.(*WalletTxDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_WalletTokenUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTokenUpdatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).WalletTokenUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/WalletTokenUpdated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).WalletTokenUpdated(ctx, req.(*WalletTokenUpdatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_WalletTokenSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTokenSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).WalletTokenSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/WalletTokenSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).WalletTokenSearch(ctx, req.(*WalletTokenSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_WalletGetTokenListByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletGetTokenListByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).WalletGetTokenListByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/WalletGetTokenListByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).WalletGetTokenListByType(ctx, req.(*WalletGetTokenListByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_WalletGetTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).WalletGetTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/WalletGetTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).WalletGetTransactionList(ctx, req.(*WalletTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_CountTransactionByTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountByTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).CountTransactionByTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/CountTransactionByTimeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).CountTransactionByTimeRange(ctx, req.(*CountByTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_CountTransactionByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTransactionByBlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).CountTransactionByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/CountTransactionByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).CountTransactionByBlockNumber(ctx, req.(*CountTransactionByBlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_CountAccountByTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountByTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).CountAccountByTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/CountAccountByTimeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).CountAccountByTimeRange(ctx, req.(*CountByTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_CountContractByTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountByTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).CountContractByTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/CountContractByTimeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).CountContractByTimeRange(ctx, req.(*CountByTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiVerifyTokenSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiVerifyTokenContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiVerifyTokenSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiVerifyTokenSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiVerifyTokenSymbol(ctx, req.(*ApiVerifyTokenContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiBlockOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiBlockOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiBlockOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiBlockOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiBlockOverview(ctx, req.(*ApiBlockOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiTxOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTxOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiTxOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiTxOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiTxOverview(ctx, req.(*ApiTxOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiCountAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiCountAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiCountAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiCountAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiCountAddress(ctx, req.(*ApiCountAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiTxExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTxOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiTxExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiTxExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiTxExists(ctx, req.(*ApiTxOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiBlockExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiBlockOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiBlockExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiBlockExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiBlockExists(ctx, req.(*ApiBlockOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiTxListByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTxListByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiTxListByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiTxListByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiTxListByContract(ctx, req.(*ApiTxListByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiContractOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiContractOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiContractOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiContractOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiContractOverview(ctx, req.(*ApiContractOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiAddressOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiAddressOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiAddressOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiAddressOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiAddressOverview(ctx, req.(*ApiAddressOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiTxListByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiTxListByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiTxListByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiTxListByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiTxListByAccount(ctx, req.(*ApiTxListByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiGetLatestTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiGetLatestTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiGetLatestTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiGetLatestTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiGetLatestTxList(ctx, req.(*ApiGetLatestTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiBlockchainBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiBlockchainBlockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiBlockchainBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiBlockchainBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiBlockchainBlockList(ctx, req.(*ApiBlockchainBlockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiBlockchainAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiBlockchainAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiBlockchainAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiBlockchainAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiBlockchainAccountList(ctx, req.(*ApiBlockchainAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiBlockchainTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiBlockchainTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiBlockchainTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiBlockchainTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiBlockchainTxList(ctx, req.(*ApiBlockchainTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiSmartContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiSmartContractListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiSmartContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiSmartContractList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiSmartContractList(ctx, req.(*ApiSmartContractListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockGrpcService_ApiGetBlockNumberByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiGetBlockNumberByBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockGrpcServiceServer).ApiGetBlockNumberByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/block_proto.BlockGrpcService/ApiGetBlockNumberByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockGrpcServiceServer).ApiGetBlockNumberByBlockHash(ctx, req.(*ApiGetBlockNumberByBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockGrpcService_ServiceDesc is the grpc.ServiceDesc for BlockGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "block_proto.BlockGrpcService",
	HandlerType: (*BlockGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WalletTokenPrice",
			Handler:    _BlockGrpcService_WalletTokenPrice_Handler,
		},
		{
			MethodName: "WalletTxDetails",
			Handler:    _BlockGrpcService_WalletTxDetails_Handler,
		},
		{
			MethodName: "WalletTokenUpdated",
			Handler:    _BlockGrpcService_WalletTokenUpdated_Handler,
		},
		{
			MethodName: "WalletTokenSearch",
			Handler:    _BlockGrpcService_WalletTokenSearch_Handler,
		},
		{
			MethodName: "WalletGetTokenListByType",
			Handler:    _BlockGrpcService_WalletGetTokenListByType_Handler,
		},
		{
			MethodName: "WalletGetTransactionList",
			Handler:    _BlockGrpcService_WalletGetTransactionList_Handler,
		},
		{
			MethodName: "CountTransactionByTimeRange",
			Handler:    _BlockGrpcService_CountTransactionByTimeRange_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _BlockGrpcService_GetBlocks_Handler,
		},
		{
			MethodName: "CountTransactionByBlockNumber",
			Handler:    _BlockGrpcService_CountTransactionByBlockNumber_Handler,
		},
		{
			MethodName: "CountAccountByTimeRange",
			Handler:    _BlockGrpcService_CountAccountByTimeRange_Handler,
		},
		{
			MethodName: "CountContractByTimeRange",
			Handler:    _BlockGrpcService_CountContractByTimeRange_Handler,
		},
		{
			MethodName: "ApiVerifyTokenSymbol",
			Handler:    _BlockGrpcService_ApiVerifyTokenSymbol_Handler,
		},
		{
			MethodName: "ApiBlockOverview",
			Handler:    _BlockGrpcService_ApiBlockOverview_Handler,
		},
		{
			MethodName: "ApiTxOverview",
			Handler:    _BlockGrpcService_ApiTxOverview_Handler,
		},
		{
			MethodName: "ApiCountAddress",
			Handler:    _BlockGrpcService_ApiCountAddress_Handler,
		},
		{
			MethodName: "ApiTxExists",
			Handler:    _BlockGrpcService_ApiTxExists_Handler,
		},
		{
			MethodName: "ApiBlockExists",
			Handler:    _BlockGrpcService_ApiBlockExists_Handler,
		},
		{
			MethodName: "ApiTxListByContract",
			Handler:    _BlockGrpcService_ApiTxListByContract_Handler,
		},
		{
			MethodName: "ApiContractOverview",
			Handler:    _BlockGrpcService_ApiContractOverview_Handler,
		},
		{
			MethodName: "ApiAddressOverview",
			Handler:    _BlockGrpcService_ApiAddressOverview_Handler,
		},
		{
			MethodName: "ApiTxListByAccount",
			Handler:    _BlockGrpcService_ApiTxListByAccount_Handler,
		},
		{
			MethodName: "ApiGetLatestTxList",
			Handler:    _BlockGrpcService_ApiGetLatestTxList_Handler,
		},
		{
			MethodName: "ApiBlockchainBlockList",
			Handler:    _BlockGrpcService_ApiBlockchainBlockList_Handler,
		},
		{
			MethodName: "ApiBlockchainAccountList",
			Handler:    _BlockGrpcService_ApiBlockchainAccountList_Handler,
		},
		{
			MethodName: "ApiBlockchainTxList",
			Handler:    _BlockGrpcService_ApiBlockchainTxList_Handler,
		},
		{
			MethodName: "ApiSmartContractList",
			Handler:    _BlockGrpcService_ApiSmartContractList_Handler,
		},
		{
			MethodName: "ApiGetBlockNumberByBlockHash",
			Handler:    _BlockGrpcService_ApiGetBlockNumberByBlockHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}
